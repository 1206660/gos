/*
 * Generated by generate_tables
 * Warning: don't modify this file
 */

package models

import (
	. "app/consts"
	"fmt"
	. "goslib/base_model"
	"gslib/player"
)

type UserModel struct {
	Ctx  *player.Player
	Data *User
}

func FindUser(ctx *player.Player, uuid string) *UserModel {
	return ctx.Store.Get([]string{"models", "users"}, uuid).(*UserModel)
}

func CreateUser(ctx *player.Player, data *User) *UserModel {
	model := &UserModel{
		Ctx:  ctx,
		Data: data,
	}
	ctx.Store.Set([]string{"models", "users"}, data.Uuid, model)
	return model
}

func (self *UserModel) GetUuid() string {
	return self.Data.Uuid
}

func (self *UserModel) GetTableName() string {
	return "users"
}

func (self *UserModel) Save() {
	self.Ctx.Store.UpdateStatus("users", self.GetUuid(), STATUS_UPDATE)
}

func (self *UserModel) Delete() {
	self.Ctx.Store.Del([]string{"models", "users"}, self.GetUuid())
	self.Ctx.Store.UpdateStatus("users", self.GetUuid(), STATUS_DELETE)
}

func (self *UserModel) SqlForRec(status int8) string {
	data := self.Data
	switch status {
	case STATUS_DELETE:
		return fmt.Sprintf("DELETE FROM `users` WHERE `uuid`='%s'", data.Uuid)
	case STATUS_CREATE:
		return fmt.Sprintf("INSERT INTO `users` (level, exp, name, online) VALUES (%d, %d, '%s', %t)", data.Level, data.Exp, data.Name, data.Online)
	case STATUS_UPDATE:
		return fmt.Sprintf("UPDATE `users` SET level=%d, exp=%d, name='%s', online=%t WHERE `uuid`='%s'", data.Level, data.Exp, data.Name, data.Online, data.Uuid)
	}
	return ""
}
