// Code generated by protoc-gen-go. DO NOT EDIT.
// source: connectToGame.proto

package connectAppProto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// A RouteNote is a message sent while at a given point.
type RouteMsg struct {
	// The location from which the message is sent.
	AccountId string `protobuf:"bytes,1,opt,name=accountId" json:"accountId,omitempty"`
	// The message to be sent.
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *RouteMsg) Reset()                    { *m = RouteMsg{} }
func (m *RouteMsg) String() string            { return proto.CompactTextString(m) }
func (*RouteMsg) ProtoMessage()               {}
func (*RouteMsg) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *RouteMsg) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *RouteMsg) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*RouteMsg)(nil), "connectApp.RouteMsg")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for RouteConnectGame service

type RouteConnectGameClient interface {
	// A Bidirectional streaming RPC.
	//
	// Accepts a stream of RouteNotes sent while a route is being traversed,
	// while receiving other RouteNotes (e.g. from other users).
	AgentStream(ctx context.Context, opts ...grpc.CallOption) (RouteConnectGame_AgentStreamClient, error)
}

type routeConnectGameClient struct {
	cc *grpc.ClientConn
}

func NewRouteConnectGameClient(cc *grpc.ClientConn) RouteConnectGameClient {
	return &routeConnectGameClient{cc}
}

func (c *routeConnectGameClient) AgentStream(ctx context.Context, opts ...grpc.CallOption) (RouteConnectGame_AgentStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_RouteConnectGame_serviceDesc.Streams[0], c.cc, "/connectApp.RouteConnectGame/AgentStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &routeConnectGameAgentStreamClient{stream}
	return x, nil
}

type RouteConnectGame_AgentStreamClient interface {
	Send(*RouteMsg) error
	Recv() (*RouteMsg, error)
	grpc.ClientStream
}

type routeConnectGameAgentStreamClient struct {
	grpc.ClientStream
}

func (x *routeConnectGameAgentStreamClient) Send(m *RouteMsg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *routeConnectGameAgentStreamClient) Recv() (*RouteMsg, error) {
	m := new(RouteMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for RouteConnectGame service

type RouteConnectGameServer interface {
	// A Bidirectional streaming RPC.
	//
	// Accepts a stream of RouteNotes sent while a route is being traversed,
	// while receiving other RouteNotes (e.g. from other users).
	AgentStream(RouteConnectGame_AgentStreamServer) error
}

func RegisterRouteConnectGameServer(s *grpc.Server, srv RouteConnectGameServer) {
	s.RegisterService(&_RouteConnectGame_serviceDesc, srv)
}

func _RouteConnectGame_AgentStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RouteConnectGameServer).AgentStream(&routeConnectGameAgentStreamServer{stream})
}

type RouteConnectGame_AgentStreamServer interface {
	Send(*RouteMsg) error
	Recv() (*RouteMsg, error)
	grpc.ServerStream
}

type routeConnectGameAgentStreamServer struct {
	grpc.ServerStream
}

func (x *routeConnectGameAgentStreamServer) Send(m *RouteMsg) error {
	return x.ServerStream.SendMsg(m)
}

func (x *routeConnectGameAgentStreamServer) Recv() (*RouteMsg, error) {
	m := new(RouteMsg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _RouteConnectGame_serviceDesc = grpc.ServiceDesc{
	ServiceName: "connectApp.RouteConnectGame",
	HandlerType: (*RouteConnectGameServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AgentStream",
			Handler:       _RouteConnectGame_AgentStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "connectToGame.proto",
}

func init() { proto.RegisterFile("connectToGame.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 161 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4e, 0xce, 0xcf, 0xcb,
	0x4b, 0x4d, 0x2e, 0x09, 0xc9, 0x77, 0x4f, 0xcc, 0x4d, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17,
	0xe2, 0x82, 0x0a, 0x3a, 0x16, 0x14, 0x28, 0xd9, 0x70, 0x71, 0x04, 0xe5, 0x97, 0x96, 0xa4, 0xfa,
	0x16, 0xa7, 0x0b, 0xc9, 0x70, 0x71, 0x26, 0x26, 0x27, 0xe7, 0x97, 0xe6, 0x95, 0x78, 0xa6, 0x48,
	0x30, 0x2a, 0x30, 0x6a, 0x70, 0x06, 0x21, 0x04, 0x84, 0x84, 0xb8, 0x58, 0x52, 0x12, 0x4b, 0x12,
	0x25, 0x98, 0x14, 0x18, 0x35, 0x78, 0x82, 0xc0, 0x6c, 0xa3, 0x60, 0x2e, 0x01, 0xb0, 0x6e, 0x67,
	0x88, 0x81, 0x20, 0x3b, 0x84, 0xec, 0xb9, 0xb8, 0x1d, 0xd3, 0x53, 0xf3, 0x4a, 0x82, 0x4b, 0x8a,
	0x52, 0x13, 0x73, 0x85, 0x44, 0xf4, 0x10, 0xb6, 0xe9, 0xc1, 0xac, 0x92, 0xc2, 0x2a, 0xaa, 0xc4,
	0xa0, 0xc1, 0x68, 0xc0, 0xe8, 0x24, 0x18, 0xc5, 0x8f, 0x90, 0x0c, 0x00, 0xb9, 0x38, 0x89, 0x0d,
	0xec, 0x70, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb9, 0xcf, 0x9a, 0x34, 0xcf, 0x00, 0x00,
	0x00,
}
